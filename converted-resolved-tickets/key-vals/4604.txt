zendeskTicketNumber: 4604
zendeskLink: https://sourcegraph.zendesk.com/agent/tickets/4604
title: New Slack message in support-upwork-sourcegraph
Application engineer: Giselle Northy
Customer: Upwork Global Inc. 
Date: Nov 16
Version: 3.33.0​
Deployment: docker-compose
External Services: BITBUCKETSERVER
Auth Providers: builtin,saml
Slack Links: https://sourcegraph.slack.com/archives/C01S5DM6NG7/p1637104137049100
GitHub Issue Link:
Doc Update Link:
Summary: Esentially there was confusion as to how to do a Regex search, the different kinds of search and what they're useful for.
Here are some examples of ways to do it with Regex search I came up with. I also found that if one mouses over the search text, it gives a decent preview of what the search is matching.
A)  To make it easy to test, I used an example repo on Sourcegraph.com It has 2 repo's under it, CS372_Networking and programming_by_doing https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/northyg/&patternType=literal search: 
B)  Then I wanted to omit one of the repo's under northyg, the programming_by_doing repo.
Having the .\* after northyg/matches the string pro Now that repo is excluded from results: https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/northyg/+-repo:%5Egithub%5C.com/northyg/pro.\*&patternType=literal
C)  To omit file results that start with a string, It's similar. This returns all files in that repo that have the .java extension.
Now I'm going to add - in front of file, and 
https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/northyg/programming_by_doing%24+-file:%5EALittle.\*%5C.java&patternType=literal
You might find it easier like I did to use file: or repo: to find what I'm looking for first, then just add the dash - in front to omit the results. Also, clicking into one of the files and grabbing the search string that populates made it easier to modify it.
**Regarding the types of searches**, there are three different pattern types: Regex, Literal and Structural.
The default type is Literal. You toggle through the different types of searches not by keyword, but instead with the toggles in the UI to the right of the search bar, or by using patterntype:
Pattern types are mutually exclusive, you can only have a certain pattern type per query. So while you can incorporate some regex into other search patterns, it's not quite the same as toggling to that pattern. Otherwise it will default to literal.
**The different types of searches are useful for different things:**
**Structural search** The intent of it is to be more syntax aware code search. For instance, if you search for append{...} then all your curly braces will align in your search results. So you can see how that's effective because the append call has other function calls inside of it.
Regex search would capture the whole line because it uses greedy search or goes to the first 'right' parentheses.
So in the screen capture example, Structural search is aware of the structures of Go and makes sure that all of the arguments included in the code line of your search show up in the search results. It's a more 'natural' way of searching, and there are code extensions, and you can use regex in parts of the query.
**Regex search ** Is useful because it matches access lines, which is something that literal search does not do.
You can find more about the use cases here: https://docs.sourcegraph.com/code_search/tutorials/examples
Search query patterns with some examples. https://docs.sourcegraph.com/code_search/reference/queries
Add link to future doc here!
