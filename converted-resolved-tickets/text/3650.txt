-   CSE: Mariam Adedeji
-   Customer: Glovo 
-   Date: Oct 2
-   Version: 3.31.2â€‹
-   Deployment: docker-compose
-   External Services: GITHUB
-   Auth Providers: github
-   Slack Links: https://sourcegraph.slack.com/archives/C01NDS6BVBQ/p1633176112047600
-   GitHub Issue Link: https://github.com/sourcegraph/customer/issues/540
-   Doc Update Link:
They are encountering a role/permission issue with their DB migration. Confirmed that the role "sg_service" was removed from our docs because it has been removed from 3.31.0 and they are on 3.30.1 but they can't upgrade until they complete the DB migration because of alpine-based DB corruption.
questions about how to prepare our RDS database for restoring data from https://github.com/sourcegraph/deploy-sourcegraph-docker/blob/v3.30.1/docker-compose/docker-compose.yaml
After so much research, I figured they would have to create a role for "sg_service", but I needed to be sure of the best way to do that and I couldn't find anything on it in our docs, so I had to raise a github issue for the distribution team. I recommended the following based on their advice \>\>You should be able to create the sg_service role manually on your database on RDS using the initial migration script: https://github.com/sourcegraph/sourcegraph/blob/v3.30.1/migrations/frontend/1528395840_create_sg_service_role.up.sql
They ended up trying the migration after 2 weeks, they changed the username in their AWS RDS database to sg from sourcegraph and restoring the dump worked. There were however other problems. Namely -- after starting Sourcegraph it behaved like a fresh install. They dug more into the databases on the RDS instance by running 
I had to raise a GitHub issue for the delivery engineer to help troubleshoot further. The root cause of the issue: they had PGDATABASE=sourcegraph_main in their DB settings, but their database was restored into DB sg and that was the cause of the issue
Recommendation from the engineering team: Run pg_dump without -C so it doesn't create the database as part of the dump file. Otherwise, they can create a blank RDS instance and let the dump script do everything. Rename the databases if they want to restore them into another database.For example, since having all their existing data in sg they could do this: DROP DATABASE sourcegraph_main; ALTER DATABASE sg RENAME TO sourcegraph_main; ALTER DATABASE sourcegraph_main OWNER TO sourcegraph_main; 3. Or just change the ennvar in the compose file to PGDATABASE=sg
Resolution They ended up declaring the DB names in AWS and doing the dump without the -C option, so that the SQL file doesn't attempt to recreate the DB.
An important thing to note during DB migration codeintel DB data will be regenerated over time, so need to restore it.
