-   Application engineer: Michael Bali
-   Customer: Nutanix, Inc. 
-   Date: May 30, 2022
-   Version: 3.34.2​
-   Deployment: kubernetes
-   External Services: GITHUB,OTHER
-   Auth Providers: builtin,saml
-   Slack Links: https://sourcegraph.slack.com/archives/C02BQBNJVL0/p1653959717867999
-   GitHub Issue Link: N/A
-   Doc Update Link: N/A
Code Intel Restarts frequently After enabling RockSkip
-   Requested for a describe pod for codeintel or pgsql.
-   Requested for grafana chart for the memory usage of both the code intel Db and pgsql DB
-   Requested for logs from the postgres pod.
-   We see some corruption in the code intel DB
-   Frequent alert for transaction duration on pgsql pods \["\[CRITICAL\] postgres: 0.5s+ maximum transaction durations for 10m0s"\](https://docs.sourcegraph.com/@v3.38.1/admin/observability/alert_solutions
-   Needed to find out where rockskip is writing on which database, codeintel or main pgsql
-   We tuned readiness and liveness probe, still issue persist
-   We also need to find the reason behind sudden increase in memory utilization for pgsql.
Chris from Code intel had to step in. - Rockskip connects to the code intel-DB not the front end - To stop RockSkip Indexing and Delete Rockskip index. - Set 
Likely root cause: codeintel-db did not have enough RAM to use Rockskip.
Longer explanation: Enabling Rockskip added memory pressure to the 
Other notes: - The Rockskip tables are using 11GB of disk in Postgres - After recovery, the biggest Postgres process is using 52MB of RAM - Nutanix disabled Rockskip indexing in order to avoid putting load on the 
Action items: - DONE: will run some benchmarks to estimate the RAM requirements of 
Here's the Rockskip RAM benchmark methodology: - I had Rockskip index 116K of the 600K total commits of https://github.com/sgtest/megarepo over 6 hours locally on my mac (I stopped it because I didn't see any upward trend in RAM usage)
Results: - RAM usage went from 250MB before indexing -\> 1100MB during indexing -\> 250MB after indexing. - I then ran Rockskip on 2K commits of https://github.com/sourcegraph/sourcegraph and the RAM usage pattern looked the same - I then ran Rockskip on both repos at the same time and the RAM usage pattern averaged a bit higher at 900MB but peaked at the same 1.1GB (second screenshot). - I also ran 5 queries/sec for 5 minutes and the RAM and CPU usage didn't seem to change much at all
Conclusions: - Peak RAM usage during indexing is roughly 1GB on top of idle RAM usage - Average RAM usage increases as indexing concurrency increases (default limit is 4 repos at a time) - RAM usage is independent of the number of commits in the repo - RAM usage is independent of the number of files in the repo - 
-   https://github.com/sourcegraph/deploy-sourcegraph/pull/4136
-   https://github.com/sourcegraph/customer/issues/976
