-   Application engineer: Stomzy Mwendwa
-   Customer: KBTG 
-   Date: May 18, 2022
-   Version: ​N/A
-   Deployment: Docker-compose
-   External Services: N/A
-   Auth Providers:N/A
-   Slack Links:N/A
-   GitHub Issue Link: N/A
-   Doc Update Link: N/A
We currently use only 1 gitlab that run on port 8443.
I think open firewall from POC server to GitLab at 8443 should be enough.
What about webhook?  Should I open port 80 or 443 from GitLab to POC server too?
Due to my POC server is required to not able to connect to internet and I use docker-compose installation method.
I guess it mean that I have to pre-download all images in docker-compose.yml file to that server.
Do you have any recommend method to prepare everything before run docker-compose for our non-internet-access POC server?
Otherwise I'll need to run docker-compose in my laptop and export+import all images manually one-by-one, which is not efficient.
Yes you are correct regarding GitLab, you'd want to open port 8443 to your Gitlab.
Option 1: You can ensure that  container images are accessible (either pulling from an internal container registry, or pre-populated on the instance). I've seen some customers choose to use a self-hosted image registry such as Artifactory, and create a scheduled job to pull down all Sourcegraph's container images from DockerHub.
Option 2: It is also possible to just pull the images to a local directory on the machine that deploys the containers, and reference the local location in the docker-compose manifest.
This is a little extra information but happy to share that it also is possible to create an automation that pulls all Sourcegraph Docker images at a regular interval.  Then, whenever you'd like to run an upgrade, you can run a find-and-replace script that will rename all the images in the docker-compose file to target your local copies.
For a Docker Compose deployment, it's relatively quick especially if you use docker-compose.override.yml to store your customizations.
Happy to share a tool that lists all image names to pull to make it easier for you to pull from DockerHub and into your registry.
I hope this helps answer your question. As for webhooks, since port 80 exposes to the internet, you'd want this to point explicitly to your POC server, so 443.
https://sourcegraph.github.io/customer-assets/image-list-generator/
